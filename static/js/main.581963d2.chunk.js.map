{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","count","setCount","start","setStart","setWait","intervalId","useRef","click$","fromEvent","document","pipe","buffer","debounceTime","map","clicks","length","filter","clicksLength","subscribe","_","clearInterval","current","seconds","slice","minutes","Math","floor","getMinutes","hours","className","onClick","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gQAoEeA,EA7Dc,WAAO,IAAD,EACPC,mBAAS,GADF,mBAC1BC,EAD0B,KACnBC,EADmB,OAEPF,oBAAS,GAFF,mBAE1BG,EAF0B,KAEnBC,EAFmB,OAGTJ,oBAAS,GAHA,mBAGpBK,GAHoB,WAK3BC,EAAaC,iBAAY,MAEzBC,EAASC,YAAUC,SAAU,SAEdF,EAAOG,KAC1BC,YAAOJ,EAAOG,KAAKE,YAAa,OAChCC,aAAI,SAACC,GAAD,OAAYA,EAAOC,UACvBC,aAAO,SAACC,GAAD,OAAmC,IAAjBA,MAGdC,WAAU,SAACC,GACtBhB,GAAS,GACTiB,cAAcf,EAAWgB,YAG3B,IAoBMC,EAAU,WAAItB,EAAQ,IAAKuB,OAAO,GAClCC,EAAY,UAAMC,KAAKC,MAAM1B,EAAQ,KACrC2B,EAAa,WAAIH,EAAU,IAAKD,OAAO,GACvCK,EAAQ,WAAIH,KAAKC,MAAM1B,EAAQ,OAAQuB,OAAO,GAEpD,OACE,sBAAKM,UAAU,YAAf,UACE,sBAAKA,UAAU,QAAf,UACGD,EADH,IACWD,EADX,IACwBL,KAExB,sBAAKO,UAAU,UAAf,UACE,wBAAQA,UAAU,SAASC,QA/BZ,WACd5B,IACHE,GAAQ,GACRD,GAAS,GACTE,EAAWgB,QAAUU,aAAY,WAC/B9B,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC3B,MAGDE,IACFC,GAAS,GACTF,EAAS,GACTmB,cAAcf,EAAWgB,WAmBvB,SACGnB,EAAQ,OAAS,UAEpB,wBAAQ2B,UAAU,SAAlB,kBACA,wBAAQA,UAAU,SAASC,QAnBb,WAClB7B,EAAS,IAkBL,0BChDO+B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASmC,eAAe,SAM1BZ,M","file":"static/js/main.581963d2.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { fromEvent } from \"rxjs\";\nimport { map, buffer, filter, debounceTime } from \"rxjs/operators\";\nimport \"./App.css\";\n\ntype Props = {};\n\nconst App: React.FC<Props> = () => {\n  const [count, setCount] = useState(0);\n  const [start, setStart] = useState(false);\n  const [wait, setWait] = useState(false);\n\n  const intervalId = useRef<any>(null);\n\n  const click$ = fromEvent(document, \"click\");\n\n  const doubleClick$ = click$.pipe(\n    buffer(click$.pipe(debounceTime(300))),\n    map((clicks) => clicks.length),\n    filter((clicksLength) => clicksLength === 2)\n  );\n\n  doubleClick$.subscribe((_) => {\n    setStart(false);\n    clearInterval(intervalId.current);\n  });\n\n  const startAndStop = () => {\n    if (!start) {\n      setWait(true);\n      setStart(true);\n      intervalId.current = setInterval(() => {\n        setCount((count) => count + 1);\n      }, 1000);\n    }\n\n    if (start) {\n      setStart(!true);\n      setCount(0);\n      clearInterval(intervalId.current);\n    }\n  };\n\n  const handleReset = () => {\n    setCount(0);\n  };\n\n  const seconds = `0${count % 60}`.slice(-2);\n  const minutes: any = `${Math.floor(count / 60)}`;\n  const getMinutes = `0${minutes % 60}`.slice(-2);\n  const hours = `0${Math.floor(count / 3600)}`.slice(-2);\n\n  return (\n    <div className=\"container\">\n      <div className=\"value\">\n        {hours}:{getMinutes}:{seconds}\n      </div>\n      <div className=\"buttons\">\n        <button className=\"button\" onClick={startAndStop}>\n          {start ? \"Stop\" : \"Start\"}\n        </button>\n        <button className=\"button\">Wait</button>\n        <button className=\"button\" onClick={handleReset}>Reset</button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}